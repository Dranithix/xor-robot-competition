#include <iostream>
#include <math.h>
using namespace std;

/* CLOCK */
#include <time.h>
clock_t t;
void startClock()
{
	t = clock();
}
void stopClock()
{
	t = clock() - t;
}
void printClock()
{
	printf ("RUNTIME: %d ticks (%f seconds).\n",t,((float)t)/CLOCKS_PER_SEC);
}

float dist(int x, int y, int x1, int y1, int x2, int y2);
int rdp(int buff[], int list[], float e, int start, int end);

/**
*	The first line of the input consists of an integer n(array.length).
*	The second line of the input consists of the buffer array from buff[0] to buff[n].
*	The third line of the input consists of a float e(epsilon).
*/
int main()
{
	/* var */
	int n;
	float e;
	int count;
	scanf("%d", &n);
	int *buff=new int[n];
	int *list=new int[n];
	count=0;
	while (count!=n)
	{
		scanf("%d", &buff[count]);
		count++;
	}
	while (1)
	{
		scanf("%f", &e);	//change input for best results
		count=0;
		while (count!=n)
		{
			list[count]=0;
			count++;
		}
		/* processing */
		list[0]=1;
		list[n-1]=1;
		startClock();	//runtime
		rdp(buff, list, e, 0, n-1);
		stopClock();	//runtime
		/* output */
		count=0;
		while (count!=n)
		{
			if (list[count]==1)
			{
				printf("%d %d\n", count, buff[count]);
			}
			count++;
		}
		printClock();	//runtime
	}
	return 0;
}

float dist(int x, int y, int x1, int y1, int x2, int y2)
{
	float a;
	float b;
	float c;
	float d;
	float dist;
	a=x-x1;
	b=y-y1;
	c=x2-x1;
	d=y2-y1;
	dist=abs(a*d-c*b)/pow(c*c+d*d, 0.5);
	return dist;
}

int rdp(int buff[], int list[], float e, int start, int end)
{
	int index;
	int count;
	float distance;
	index=-1;
	distance=0;
	count=start+1;
	while (count!=end)
	{
		if (dist(count, buff[count], start, buff[start], end, buff[end])>distance)
		{
			index=count;
			distance=dist(count, buff[count], start, buff[start], end, buff[end]);
		}
		count++;
	}
	if (index!=-1)
	{
		printf("distance of (%d, %d) to line (%d, %d)(%d, %d) = %f\n", index, buff[index], start, buff[start], end, buff[end], distance);
		if (distance>e)
		{
			printf("point (%d, %d) retained\n", index, buff[index]);
			list[index]=1;
			rdp(buff, list, e, start, index);
			rdp(buff, list, e, index, end);
		}
		else
		{
			printf("point (%d, %d) removed\n", index, buff[index]);
		}
	}
	return 0;
}
