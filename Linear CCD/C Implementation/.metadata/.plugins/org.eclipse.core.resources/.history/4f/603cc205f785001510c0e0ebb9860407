#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

void quickSort (int *a) {
    int i, j, p, t, n = sizeof(a) / sizeof(a[0]);
    p = a[n / 2];
    for (i = 0, j = n - 1;; i++, j--) {
        while (a[i] < p)
            i++;
        while (p < a[j])
            j--;
        if (i >= j)
            break;
        t = a[i];
        a[i] = a[j];
        a[j] = t;
    }
    quickSort(a, i);
    quickSort(a + i, n - i);
}

uint32_t * median(uint32_t * signal, int windowLen) {
	static uint32_t result[128];
	for (int i = windowLen; i < 128 - (windowLen / 2); i++) {
		uint32_t window[windowLen];
		for (int j = 0; j < windowLen; ++j) {
			window[j] = signal[i - (windowLen / 2) + j];
		}
		bubble_sort(window, windowLen);
		result[i - (windowLen / 2)] = window[windowLen / 2];
	}
	return result;
}

double calculateAreas(uint32_t signal[]) {
	uint32_t leftPartition[64];
	uint32_t rightPartition[64];
	double leftAreaSum = 0;
	double rightAreaSum = 0;
	int lastPossibleIndex = -1;

	memcpy(leftPartition, signal, 64 * sizeof(int));
	memcpy(rightPartition, signal + 64, 64 * sizeof(int));

	for (int i = 0; i < 63; i++) {
		if (leftPartition[i] == -1)
			continue;
		else {
			if (lastPossibleIndex == -1) {
				lastPossibleIndex = i;
				continue;
			}
			int trpHeight = (i + 1) - lastPossibleIndex;
			double area = (leftPartition[i] + leftPartition[lastPossibleIndex])
					/ 2 * trpHeight;
			leftAreaSum += area;
			lastPossibleIndex = i;
		}
	}

	lastPossibleIndex = -1;
	for (int i = 0; i < 63; i++) {
		if (rightPartition[i] == -1)
			continue;
		else {
			if (lastPossibleIndex == -1) {
				lastPossibleIndex = i;
				continue;
			}
			int trpHeight = (i + 1) - lastPossibleIndex;
			double area =
					(rightPartition[i] + rightPartition[lastPossibleIndex]) / 2
							* trpHeight;
			rightAreaSum += area;
			lastPossibleIndex = i;
		}
	}
	double ratio = leftAreaSum / rightAreaSum;

	return ratio;
}

int main() {
	time_t t;
	uint32_t * signal = malloc(128 * sizeof(int));

	srand((unsigned) time(&t));
	for (int i = 0; i < 128; i++) {
		int signalVal = (rand() % 156) - i;
		signal[i] = 0 > signalVal ? 0 : signalVal;
		printf("%d ", signal[i]);
	}
	printf("\n%f", calculateAreas(signal));
	return 0;
}
