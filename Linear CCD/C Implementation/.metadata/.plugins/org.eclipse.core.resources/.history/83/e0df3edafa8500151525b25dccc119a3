#include <Algorithms.h>

void quickSort(uint32_t *a, int n) {
	uint32_t i, p = a[n / 2], t;
	for (int i = 0, j = n - 1;; i++, j--) {
		while (a[i] < p)
			i++;
		while (p < a[j])
			j--;
		if (i >= j)
			break;
		t = a[i];
		a[i] = a[j];
		a[j] = t;
	}
	quickSort(a, i);
	quickSort(a + i, n - i);
}

uint32_t * medianFilter(uint32_t * signal, int windowLen) {
	static uint32_t result[128];
	for (int i = windowLen; i < 128 - (windowLen / 2); i++) {
		uint32_t window[windowLen];
		for (int j = 0; j < windowLen; ++j) {
			window[j] = signal[i - (windowLen / 2) + j];
		}
		quickSort(window, windowLen);
		result[i - (windowLen / 2)] = window[windowLen / 2];
	}
	return result;
}

uint32_t pointDistanceToLine(int x, int y, int x1, int y1, int x2, int y2) {
	uint32_t a = x - x1;
	uint32_t b = y - y1;
	uint32_t c = x2 - x1;
	uint32_t d = y2 - y1;
	return abs(a * d - c * b) / pow(c * c + d * d, 0.5);
}

void douglasPeuckerRecursion(uint32_t signal[], uint32_t list[], float e,
		int start, int end) {
	int index = -1;
	int count = start + 1;
	float distance = 0;
	while (count != end) {
		if (pointDistanceToLine(count, signal[count], start, signal[start], end,
				signal[end]) > distance) {
			index = count;
			distance = pointDistanceToLine(count, signal[count], start,
					signal[start], end, signal[end]);
		}
		count++;
	}
	if (index != -1) {
		if (distance > e) {
			list[index] = 1;
			douglasPeuckerRecursion(signal, list, e, start, index);
			douglasPeuckerRecursion(signal, list, e, index, end);
		}
	}
}

int douglasPeucker(uint32_t buff[], float e) {
	uint32_t list[128];
	douglasPeuckerRecursion(buff, list, e, 0, 127);
	int count = 0;
	for (int i = 0; i < 128; i++) {
		if (list[i] == 0) {
			buff[i] = -1;
			count++;
		}
	}
	return count;
}

double calculateAreas(uint32_t signal[]) {
	uint32_t leftPartition[64];
	uint32_t rightPartition[64];
	double leftAreaSum = 0;
	double rightAreaSum = 0;
	int lastPossibleIndex = -1;

	memcpy(leftPartition, signal, 64 * sizeof(int));
	memcpy(rightPartition, signal + 64, 64 * sizeof(int));

	for (int i = 0; i < 63; i++) {
		if (leftPartition[i] == -1)
			continue;
		else {
			if (lastPossibleIndex == -1) {
				lastPossibleIndex = i;
				continue;
			}
			int trpHeight = (i + 1) - lastPossibleIndex;
			double area = (leftPartition[i] + leftPartition[lastPossibleIndex])
					/ 2 * trpHeight;
			leftAreaSum += area;
			lastPossibleIndex = i;
		}
	}

	lastPossibleIndex = -1;
	for (int i = 0; i < 63; i++) {
		if (rightPartition[i] == -1)
			continue;
		else {
			if (lastPossibleIndex == -1) {
				lastPossibleIndex = i;
				continue;
			}
			int trpHeight = (i + 1) - lastPossibleIndex;
			double area =
					(rightPartition[i] + rightPartition[lastPossibleIndex]) / 2
							* trpHeight;
			rightAreaSum += area;
			lastPossibleIndex = i;
		}
	}
	return leftAreaSum / rightAreaSum;
}

int main() {
	uint32_t * signal = malloc(128 * sizeof(int));

	srand(time(NULL));
	for (int i = 0; i < 128; i++) {
		int signalVal = (rand() % 156) - i;
		signal[i] = 0 > signalVal ? 0 : signalVal;
	}
	medianFilter(signal, 5);
	douglasPeucker(signal, 10);

	for (int i = 0; i < 128; i++) {
		//printf("%d ", signal[i]);
	}

	printf("\nLeft to Right Area Ratio: %f", calculateAreas(signal));
	return 0;
}
