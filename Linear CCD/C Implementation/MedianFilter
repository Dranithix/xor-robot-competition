#include <iostream>
using namespace std;

/* CLOCK */
#include <time.h>
clock_t t;
void startClock()
{
	t = clock();
}
void stopClock()
{
	t = clock() - t;
}
void printClock()
{
	printf ("RUNTIME: %d ticks (%f seconds).\n",t,((float)t)/CLOCKS_PER_SEC);
}

void swap(int &a, int &b);
int pivot(int a[], int first, int last);
void quickSort(int a[], int first, int last);
int median(int buff[], int num);
int mf(int buff[], int n, int num);

int main()
{
	int n;
	int num;
	int count;
	scanf("%d", &n);
	int* buff=new int[n];
	int* copy=new int[n];
	count=0;
	
	while (count!=n)
	{
		scanf("%d", &buff[count]);
		count++;
	}
	while (1)
	{
		scanf("%d", &num);
		num=2*num+1;
		count=0;
		while (count!=n)
		{
			copy[count]=buff[count];
			count++;
		}
		startClock();	//runtime
		mf(copy, n, num);
		stopClock();	//runtime
		count=0;
		while (count!=n)
		{
			printf("%d ", copy[count]);
			count++;
		}
		printf("\n");
		printClock();	//runtime
	}
}

void swap(int &a, int &b)
{
    int temp = a;
    a = b;
    b = temp;
}

int pivot(int a[], int first, int last)
{
    int  p = first;
    int pivotElement = a[first];
    for(int i = first+1 ; i <= last ; i++)
    {
        if(a[i] <= pivotElement)
        {
            p++;
            swap(a[i], a[p]);
        }
    }
    swap(a[p], a[first]);
    return p;
}

void quickSort(int a[], int first, int last)
{
    int pivotElement;
    if(first < last)
    {
        pivotElement = pivot(a, first, last);
        quickSort(a, first, pivotElement-1);
        quickSort(a, pivotElement+1, last);
    }
}

int median(int array[], int num)
{
	quickSort(array, 0, num-1);
	return array[(num-1)/2];
}

int mf(int buff[], int n, int num)
{
	int index;
	int i;
	int count;
	int* copy=new int[n];
	int* array=new int[num];
	count=0;
	while (count!=n)
	{
		copy[count]=buff[count];
		count++;
	}
	index=0;
	while (index!=n)
	{
		printf("computing buff[%d], Elements: ", index);
		i=-(num-1)/2;
		while (i<=(num-1)/2)
		{
			if (index+i>=0 && index+i<=n-1)
			{
				array[(num-1)/2+i]=copy[index+i];
				printf("%d ", copy[index+i]);
			}
			else if (index+i<0)
			{
				array[(num-1)/2+i]=copy[0];
				printf("%d ", copy[0]);
			}
			else
			{
				array[(num-1)/2+i]=copy[n-1];
				printf("%d ", copy[n-1]);
			}
			i++;
		}
		printf("\n");
		buff[index]=median(array, num);
		index++;
	}
	delete[] copy;
	delete[] array;
	return 0;
}
